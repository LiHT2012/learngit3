1.默认构建器是唯一获得定义的,而且它的属性是 private,可防止对这个类的继承

2.5 . 2 . 4   p r o t e c t e d :“友好的一种” 
protected(受到保护的)访问指示符要求大家提前有所认识。首先应注意这样一个事实:为继续学习本书一
直到继承那一章之前的内容,并不一定需要先理解本小节的内容。但为了保持内容的完整,这儿仍然要对此
进行简要说明,并提供相关的例子。 
protected 关键字为我们引入了一种名为“继承”的概念,它以现有的类为基础,并在其中加入新的成员,
同时不会对现有的类产生影响——我们将这种现有的类称为“基础类”或者“基本类”(Base Class)。亦
可改变那个类现有成员的行为。对于从一个现有类的继承,我们说自己的新类“扩展”(extends)了那个现
有的类。如下所示: 
class Foo extends Bar { 
类定义剩余的部分看起来是完全相同的。 
若新建一个包,并从另一个包内的某个类里继承,则唯一能够访问的成员就是原来那个包的 public 成员。当
然,如果在相同的包里进行继承,那么继承获得的包能够访问所有“友好”的成员。有些时候,基础类的创
建者喜欢提供一个特殊的成员,并允许访问衍生类。这正是 protected 的工作。若往回引用 5.2.2 小节
“public:接口访问”的那个 Cookie.java 文件,则下面这个类就不能访问“友好”的成员: 
 
//: ChocolateChip.java 
// Can't access friendly member 
// in another class 
import c05.dessert.*; 
 
public class ChocolateChip extends Cookie { 
  public ChocolateChip() { 
   System.out.println( 
     "ChocolateChip constructor"); 
  } 
  public static void main(String[] args) { 
    ChocolateChip x = new ChocolateChip(); 
    //! x.foo(); // Can't access foo 
  } 
} ///: ̄ 
 
对于继承,值得注意的一件有趣的事情是倘若方法 foo()存在于类 Cookie 中,那么它也会存在于从 Cookie
继承的所有类中。但由于 foo()在外部的包里是“友好”的,所以我们不能使用它。当然,亦可将其变成
public。但这样一来,由于所有人都能自由访问它,所以可能并非我们所希望的局面。若象下面这样修改类
Cookie: 
 
public class Cookie { 
 
133  public Cookie() {  
    System.out.println("Cookie constructor"); 
  } 
  protected void foo() { 
    System.out.println("foo");  
  } 
} 
 
那么仍然能在包 dessert 里“友好”地访问 foo(),但从 Cookie 继承的其他东西亦可自由地访问它。然而,
它并非公共的(public)。


3.
在 Java 中,package 关键字、包命名方案
以及 import 关键字为我们提供对名字的完全控制,所以命名冲突的问题可以很轻易地得到避免。 
有两方面的原因要求我们控制对成员的访问。第一个是防止用户接触那些他们不应碰的工具。对于数据类型
的内部机制,那些工具是必需的。但它们并不属于用户接口的一部分,用户不必用它来解决自己的特定问
题。所以将方法和字段变成“私有”(private)后,可极大方便用户。因为他们能轻易看出哪些对于自己来
说是最重要的,以及哪些是自己需要忽略的。这样便简化了用户对一个类的理解。 
进行访问控制的第二个、也是最重要的一个原因是:允许库设计者改变类的内部工作机制,同时不必担心它
会对客户程序员产生什么影响。最开始的时候,可用一种方法构建一个类,后来发现需要重新构建代码,以
便达到更快的速度。如接口和实施细节早已进行了明确的分隔与保护,就可以轻松地达到自己的目的,不要
求用户改写他们的代码。 
利用 Java 中的访问指示符,可有效控制类的创建者。那个类的用户可确切知道哪些是自己能够使用的,哪些
则是可以忽略的。但更重要的一点是,它可确保没有任何用户能依赖一个类的基础实施机制的任何部分。作
为一个类的创建者,我们可自由修改基础的实施细节,这一改变不会对客户程序员产生任何影响,因为他们
不能访问类的那一部分。 
有能力改变基础的实施细节后,除了能在以后改进自己的设置之外,也同时拥有了“犯错误”的自由。无论
当初计划与设计时有多么仔细,仍然有可能出现一些失误。由于知道自己能相当安全地犯下这种错误,所以
可以放心大胆地进行更多、更自由的试验。这对自己编程水平的提高是很有帮助的,使整个项目最终能更
快、更好地完成。 
一个类的公共接口是所有用户都能看见的,所以在进行分析与设计的时候,这是应尽量保证其准确性的最重
要的一个部分。但也不必过于紧张,少许的误差仍然是允许的。若最初设计的接口存在少许问题,可考虑添
加更多的方法,只要保证不删除客户程序员已在他们的代码里使用的东西。
