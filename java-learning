str.trim();//将字符串中的前导和尾随空格删除

str.split("\\s+");//按空格,制表符，等进行拆分（也就是说它是按空白部分进行拆分，不管这个空白使用设么操作留下

“上溯造型”,即 Upcasting。上溯造
型肯定是安全的,因为我们是从一个更特殊的类型到一个更常规的类型.

final：

public表示它们可在包外使用;Static 强调它们只有一个;而 final 表明它是一个常量。注意对于含有固定初始化
值(即编译期常数)的 fianl static 基本数据类型,它们的名字根据规则要全部采用大写。



之所以要使用 final 方法,可能是出于对两方面理由的考虑。第一个是为方法“上锁”,防止任何继承类改
变它的本来含义。设计程序时,若希望一个方法的行为在继承期间保持不变,而且不可被覆盖或改写,就可
以采取这种做法。
采用 final 方法的第二个理由是程序执行的效率。将一个方法设成 final 后,编译器就可以把对那个方法的
所有调用都置入“嵌入”调用里。只要编译器发现一个 final 方法调用,就会(根据它自己的判断)忽略为
执行方法调用机制而采取的常规代码插入方法(将自变量压入堆栈;跳至方法代码并执行它;跳回来;清除
堆栈自变量;最后对返回值进行处理)。相反,它会用方法主体内实际代码的一个副本来替换方法调用。这
样做可避免方法调用时的系统开销。当然,若方法体积太大,那么程序也会变得雍肿,可能受到到不到嵌入
代码所带来的任何性能提升。因为任何提升都被花在方法内部的时间抵消了。Java 编译器能自动侦测这些情
况,并颇为“明智”地决定是否嵌入一个 final 方法。然而,最好还是不要完全相信编译器能正确地作出所
有判断。通常,只有在方法的代码量非常少,或者想明确禁止方法被覆盖的时候,才应考虑将一个方法设为
final。
类内所有 private 方法都自动成为 final。由于我们不能访问一个 private 方法,所以它绝对不会被其他方
法覆盖(若强行这样做,编译器会给出错误提示)。可为一个 private 方法添加 final 指示符,但却不能为
那个方法提供任何额外的含义。


每个对象的代码都存在于独立的文件
中。除非真的需要代码,否则那个文件是不会载入的。通常,我们可认为除非那个类的一个对象构造完毕,
否则代码不会真的载入。由于 static 方法存在一些细微的歧义,所以也能认为“类代码在首次使用的时候载
入”。
首次使用的地方也是 static 初始化发生的地方。装载的时候,所有 static 对象和 static 代码块都会按照本
来的顺序初始化(亦即它们在类定义代码里写入的顺序)。当然,static 数据只会初始化一次。

多形性的问题(也叫作动态绑定、推迟绑定或者运行期绑定)

“后期绑定”,它意味着绑定在运行期间进行,以对象的类型为基础。后期绑定也叫作“动
态绑定”或“运行期绑定”。若一种语言实现了后期绑定,同时必须提供一些机制,可在运行期间判断对象
的类型,并分别调用适当的方法。也就是说,编译器此时依然不知道对象的类型,但方法调用机制能自己去
调查,找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为:
它们都要在对象中安插某些特殊类型的信息。

即使不包括任何 abstract 方法,亦可将一个类声明成“抽象类”。如果一个类没必要拥有任何抽象方法,而
且我们想禁止那个类的所有实例,这种能力就会显得非常有用。

单继承（extends），多实现（implements）

应该使用一个接口还是一个抽象类呢?若使用接
口,我们可以同时获得抽象类以及接口的好处。所以假如想创建的基础类没有任何方法定义或者成员变量,
那么无论如何都愿意使用接口,而不要选择抽象类。事实上,如果事先知道某种东西会成为基础类,那么第
一个选择就是把它变成一个接口。只有在必须使用方法定义或者成员变量的时候,才应考虑采用抽象类。
-----
interface Monster {// 怪物
    void menace();// 威胁
}

interface DangerousMonster extends Monster {
    void destroy();// 破坏
}

interface Lethal {// 致命的
    void kill();// 杀死
}

interface Vampire extends DangerousMonster, Lethal {// 吸血鬼
    void drinkBlood();
}

DangerousMonster是Monster的直接扩展，它产生了一个新接口。DragonZilla中实现了这个接口。
在Vampire中使用的语法仅适用于接口继承。一般情况下，只可以将extends用于单一类，但是可以引用多个基类接口。就像所看到的，只需用逗号将接口名一一分隔开即可。
-----

Java之通过继承来扩展接口
https://blog.csdn.net/raylee2007/article/details/49743447

接口中的字段会自动具备 public 属性,所以没必要专门指定。

接口中定义的字段会自动具有 static 和 final 属性。它们不能是“空白 final”,但可初始化成非常数表达式。
由于字段是 static 的,所以它们会在首次装载类之后、以及首次访问任何字段之前获得初始化。
字段并不是接口的一部分,而是保存于那个接口的 static 存储区域中。

接口中的方法自动具备public abstract属性。

×××××××
内部类：
当我们准备上溯造型到一个基础类(特别是到一个接口)的时候,内部类就开始发挥其关键作用(从
用于实现的对象生成一个接口句柄具有与上溯造型至一个基础类相同的效果)。这是由于内部类随后可完全
进入不可见或不可用状态——对任何人都将如此。所以我们可以非常方便地隐藏实施细节。我们得到的全部
回报就是一个基础类或者接口的句柄,而且甚至有可能不知道准确的类型。


内部类的使用场景和好处

　　为什么在Java中需要内部类？总结一下主要有以下四点：

　　1.每个内部类都能独立的继承一个接口的实现，所以无论外部类是否已经继承了某个(接口的)实现，对于内部类都没有影响。内部类使得多继承的解决方案变得完整，

　　2.方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。

　　3.方便编写事件驱动程序

　　4.方便编写线程代码

内部类标识符
由于每个类都会生成一个.class 文件,用于容纳与如何创建这个类型的对象有关的所有信息(这种信息产生
了一个名为 Class 对象的元类),所以大家或许会猜到内部类也必须生成相应的.class 文件,用来容纳与它
们的 Class 对象有关的信息。这些文件或类的名字遵守一种严格的形式:先是封装类的名字,再跟随一个$,
再跟随内部类的名字。例如,由 Outter.java 创建的.class 文件包括:
Outter.class
Outter$Inner.class
如果内部类是匿名的,那么编译器会简单地生成数字,把它们作为内部类标识符使用。若内部类嵌套于其他
内部类中,则它们的名字简单地追加在一个$以及外部类标识符的后面。
这种生成内部名称的方法除了非常简单和直观以外,也非常“健壮”,可适应大多数场合的要求.
由于它是 Java 的标准命名机制,所以产生的文件会自动具备“与平台无关”的能力(注意 Java 编译
器会根据情况改变内部类,使其在不同的平台中能正常工作)。


局部内部类和匿名内部类只能访问局部final变量.

java中规定，内部类只能访问外部类中的成员变量，不能访问方法中定义的变量，如果要访问方法中的变量，就要把方法中的变量声明为final（常量）的，因为这样可以使变量全局化，就相当于是在外部定义的而不是在方法里定义的
原因：
一， 当方法被调用运行完毕之后，局部变量就已消亡了。但内部类对象可能还存在，
   直到没有被引用时才会消亡。此时就会出现一种情况，就是内部类要访问一个不存在的局部变量。

二，解决这一问题的办法就是使用final修饰局部变量，通过将final局部变量"复制"一份,
 复制品直接作为方法内部类中的数据成员，这事方法内部类访问的其实是这个局部变量的复制品！
 而且，由于被final修饰的变量赋值后不能再修改，所以就保证了复制品与原始变量的一致。

三，原因二的功能能实现的原因是：Java采用了一种copy   local   variable(复制局部变量)的方式来实现，
    也就是说把定义为final的局部变量拷贝过来用，而引用的也可以拿过来用，只是不能重新赋值。
    从而造成了可以access   local   variable(访问局部变量)的假象，而这个时候由于不能重新赋值，
     所以一般不会造成不可预料的事情发生。

四， 使用final修饰符不仅会保持对象的引用不会改变,
            而且编译器还会持续维护这个对象在回调方法中的生命周期.
            所以这才是final变量和final参数的根本意义.


如果局部变量的值在编译期间就可以确定，则直接在匿名内部里面创建一个拷贝。如果局部变量的值无法在编译期间确定，则通过构造器传参的方式来对拷贝进行初始化赋值。


通过“合成”方法创建新类时,永远不必担心对那个类的成员对象的收尾工作。每个成员都是一个独立的对
象,所以会得到正常的垃圾收集以及收尾处理——无论它是不是不自己某个类一个成员。但在进行初始化的
时候,必须覆盖衍生类中的 finalize()方法——如果已经设计了某个特殊的清除进程,要求它必须作为垃圾
收集的一部分进行。覆盖衍生类的 finalize()时,务必记住调用 finalize()的基础类版本。否则,基础类的
初始化根本不会发生。

设计构建器时一个特别有效的规则是:用尽可能简单的方法使对象进入就绪状态;如果可能,避免调
用任何方法。在构建器内唯一能够安全调用的是在基础类中具有 final 属性的那些方法(也适用于 private
方法,它们自动具有 final 属性)。这些方法不能被覆盖.

在运行期间对类型进行检查的行为叫作“运行期类型标识”(RTTI)



























1，接口中定义变量必须是public static final：http://blog.csdn.net/shiyf/article/details/40517651

答：
首先接口是一种高度抽象的"模版"，,而接口中的属性也就是’模版’的成员，就应当是所有实现"模版"的实现类的共有特性，
所以它是public 的 ,是所有实现类共有的 .否则具体实现类不能使用该变量，则就没有了定义的意义。

static的原因是，假如可以是非static的话，因一个类可以继承多个接口，出现重名的变量，如何区分呢？
所以必须定义成static的，以便区分。
例如一个类实现了两个不同的接口，这两个接口中有相同名字的变量定义，示例代码如下：
public class MultiInmpl implements InTF, InTFOther{
public static void main(String[] args) {
MultiInmpl m = new MultiInmpl();
//如果实现的接口中有同名的变量，则不能引用
System.out.println(m.str);//str在2个接口中都有定义
}
}
以上代码编译错误！！！
Multiple markers at this line
- The field m.str is ambiguous
- Line breakpoint:MultiInmpl [line: 11] - main(String[])

其次,接口中如果可能定义非final的变量的话，而方法又都是abstract的，这就自相矛盾了，
有可变成员变量但对应的方法却无法操作这些变量，虽然可以直接修改这些静态成员变量的值，但所有实现类对应的值都被修改了，
这跟抽象类有何区别? 又接口是一种更高层面的抽象，是一种规范、功能定义的声明，所有可变的东西都应该归属到实现类中，
这样接口才能起到标准化、规范化的作用。所以接口中的属性必然是final的。

最后，接口只是对事物的属性和行为更高层次的抽象 。对修改关闭，对扩展（不同的实现implements）开放，
接口是对开闭原则（Open-Closed Principle ）的一种体现。
2,JSONObject和JSONArray：http://blog.csdn.net/lishuangzhe7047/article/details/28880009
 举个例子说明，如下：【{name1:{name2:{name3:'value1',name4:'value2'}}},{}】
      从外到里看，例子中就是一个数组，数组里面是两个json格式的字符串。这样分析思路就清晰多了。
    工作中需要取出name4的值，你们会怎么取呢？。最初我都想过字符串截取，那时还不了解JSONArray，现在知道了，取出来也就相当容易了。
取出name4值过程步骤：1，将以上字符串转换为JSONArray对象；2，取出对象的第一项，JSONObject对象；3，取出name1的值JSONObject对象；
4，取出name2的值JSONObject对象；5，取出name4的值value2。
    示例中json数组格式的字符串可以通过方法直接转换为JSONArray的格式:JSONArray.fromObject(String)
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
</pre><pre name="code" class="java">JSONArray getJsonArray=JSONArray.fromObject(arrayStr);//将结果转换成JSONArray对象的形式
JSONObject getJsonObj = getJsonArray.getJSONObject(0);//获取json数组中的第一项
String result=getJsonObj.getJSONObject("name1").getJSONObject("name2").getJSONObject("name4");

   好了我们说说这两个对象。
1，JSONObject
 json对象，就是一个键对应一个值，使用的是大括号{ }，如：{key:value}
2，JSONArray
  json数组，使用中括号[ ],只不过数组里面的项也是json键值对格式的

  Json对象中添加的是键值对，JSONArray中添加的是Json对象
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
JSONObject Json = new JSONObject();
JSONArray JsonArray = new JSONArray();

Json.put("key", "value");//JSONObject对象中添加键值对
##JSONObject用put添加键值对，也可.element("key",value);
##JSONArray用add添加对象Object，Object不用限定相同
##JSONObject和JSONArray的示例http://www.cnblogs.com/xwdreamer/archive/2011/12/16/2296904.html

JsonArray.add(Json);//将JSONObject对象添加到Json数组中

3，JSONObject与Map
   Map map和json都是键值对，不同的是map中键值对中间用等号分开，json中键值对中间用冒号分开。其实json就是一种特殊形式的map。
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
Map<String,String> strmap=new JSONObject();

4,spring 注解
@Component,@Service,@Controller,@Repository注解的类，并把这些类纳入进spring容器中管理。
下面写这个是引入component的扫描组件
<context:component-scan base-package=”com.mmnc”>

其中base-package为需要扫描的包（含所有子包）
       1、@Service用于标注业务层组件
       2、@Controller用于标注控制层组件(如struts中的action)
       3、@Repository用于标注数据访问组件，即DAO组件.
       4、@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。
           @Service public class UserServiceImpl implements UserService { }
           @Repository public class UserDaoImpl implements UserDao { }
 getBean的默认名称是类名（头字母小写），如果想自定义，可以@Service(“aaaaa”)这样来指定。
这种bean默认是“singleton”的，如果想改变，可以使用@Scope(“prototype”)来改变。

可以使用以下方式指定初始化方法和销毁方法：
[java] view plain copy

    @PostConstruct
    public void init() {
    }
    @PreDestroy
    public void destory() {
    }
注入方式：

把DAO实现类注入到action的service接口(注意不要是service的实现类)中，注入时不要new 这个注入的类，因为spring会自动注入，如果手动再new的话会出现错误，
然后属性加上@Autowired后不需要getter()和setter()方法，Spring也会自动注入。

在接口前面标上@Autowired注释使得接口可以被容器注入，如：
[java] view plain copy

    @Autowired
    @Qualifier("chinese")
    private Man man;

当接口存在两个实现类的时候必须使用@Qualifier指定注入哪个实现类，否则可以省略，只写@Autowired。


##@Autowired 按type进行注入，@Resource 按name进行注入
@Resource装配顺序
　　1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常
　　2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常
　　3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常
　　4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；

Spring 容器中的 Bean 是有生命周期的，Spring 允许在 Bean 在初始化完成后以及 Bean 销毁前执行特定的操作，
您既可以通过实现 InitializingBean/DisposableBean 接口来定制初始化之后 / 销毁之前的操作方法，
也可以通过 <bean> 元素的 init-method/destroy-method 属性指定初始化之后 / 销毁之前调用的操作方法

JSR-250 为初始化之后/销毁之前方法的指定定义了两个注释类，分别是 @PostConstruct 和 @PreDestroy，这两个注释只能应用于方法上。
标注了 @PostConstruct 注释的方法将在类实例化后调用，而标注了 @PreDestroy 的方法将在类销毁之前调用。

不管是通过实现 InitializingBean/DisposableBean 接口，还是通过 <bean> 元素的 init-method/destroy-method 属性进行配置，
都只能为 Bean 指定一个初始化 / 销毁的方法。但是使用 @PostConstruct 和 @PreDestroy 注释却可以指定多个初始化 / 销毁方法，
那些被标注 @PostConstruct 或 @PreDestroy 注释的方法都会在初始化 / 销毁时被执行。
