1，单例模式

懒汉式：
  //懒汉式单例类.在第一次调用的时候实例化自己   
  public class Singleton {  
      private Singleton() {}  
      private static Singleton single=null;  
      //静态工厂方法   
      public static Singleton getInstance() {  
           if (single == null) {    
               single = new Singleton();  
           }    
          return single;  
      }  
  }  
线程不安全，修改方式：（ private static volatile Singleton single=null; ）
-----
假设没有关键字volatile的情况下，两个线程A、B，都是第一次调用该单例方法，线程A先执行instance = new Instance()，该构造方法是一个非原子操作，
编译后生成多条字节码指令，由于JAVA的指令重排序，可能会先执行instance的赋值操作，该操作实际只是在内存中开辟一片存储对象的区域后直接返回内存的引用，
之后instance便不为空了，但是实际的初始化操作却还没有执行，如果就在此时线程B进入，就会看到一个不为空的但是不完整（没有完成初始化）的Instance对象，
所以需要加入volatile关键字，禁止指令重排序优化，从而安全的实现单例。

创建对象可以分解为如下的3行伪代码
memory=allocate(); //1:分配对象的内存空间
ctorInstance(memory); //2:初始化对象
instance=memory; //3:设置instance指向刚分配的内存地址
上面3行代码中的2和3之间，可能会被重排序导致先3后2,
-----
1）getInstance加sychronized
    public static synchronized Singleton getInstance() {  
         if (single == null) {    
             single = new Singleton();  
         }    
        return single;  
    }

2）双重检查
    public static Singleton getInstance() {  
        if (singleton == null) {    
            synchronized (Singleton.class) {    
               if (singleton == null) {    
                  singleton = new Singleton();   
               }    
            }    
        }    
        return singleton;   
    }  

3）静态内部类
public class Singleton {    
    private static class LazyHolder {    
       private static final Singleton INSTANCE = new Singleton();    
    }    
    private Singleton (){}    
    public static final Singleton getInstance() {    
       return LazyHolder.INSTANCE;    
    }    
} 

2。饿汉式：线程安全
  //饿汉式单例类.在类初始化时，已经自行实例化   
  public class Singleton1 {  
      private Singleton1() {}  
      private static final Singleton1 single = new Singleton1();  
      //静态工厂方法   
      public static Singleton1 getInstance() {  
          return single;  
      }  
  }  
  3。登记式
  
