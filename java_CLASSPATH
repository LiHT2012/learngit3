JAVA环境变量JAVA_HOME、CLASSPATH、PATH设置详解
https://www.cnblogs.com/Wjh794010585/articles/6582079.html

1. CLASSPATH 的陷阱 
P.java 文件存在一个非常有趣的陷阱。特别是对于早期的 Java 实现方案来说,类路径的正确设定通常都是
很困难的一项工作。编写这本书的时候,我引入了 P.java 文件,它最初看起来似乎工作很正常。但在某些情
况下,却开始出现中断。在很长的时间里,我都确信这是 Java 或其他什么在实现时一个错误。但最后,我终
于发现在一个地方引入了一个程序(即第 17 章要说明的 CodePackager.java),它使用了一个不同的类 P。
由于它作为一个工具使用,所以有时候会进入类路径里;另一些时候则不会这样。但只要它进入类路径,那
么假若执行的程序需要寻找 com.bruceeckel.tools 中的类,Java 首先发现的就是 CodePackager.java 中的
P。此时,编译器会报告一个特定的方法没有找到。这当然是非常令人头疼的,因为我们在前面的类 P 里明明
看到了这个方法,而且根本没有更多的诊断报告可为我们提供一条线索,让我们知道找到的是一个完全不同
的类(那甚至不是 public 的)。 
乍一看来,这似乎是编译器的一个错误,但假若考察 import 语句,就会发现它只是说:“在这里可能发现了
P”。然而,我们假定的是编译器搜索自己类路径的任何地方,所以一旦它发现一个 P,就会使用它;若在搜
索过程中发现了“错误的”一个,它就会停止搜索。这与我们在前面表述的稍微有些区别,因为存在一些讨
厌的类,它们都位于包内。而这里有一个不在包内的 P,但仍可在常规的类路径搜索过程中找到。 
如果您遇到象这样的情况,请务必保证对于类路径的每个地方,每个名字都仅存在一个类.


