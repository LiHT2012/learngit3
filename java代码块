public class Person {
    static{
        System.out.println("1.我是静态块，优先于构造块执行！并且只有创建第一个对象的时候执行一次！");
    }
    {
        System.out.println("2.我是构造块，优先于构造方法执行！每创建一个对象执行一次！");
    }
    public Person() {
        System.out.println("3.我是构造方法，每创建一个对象执行一次");
    }
    public void function1(){
        System.out.println("我是非静态方法中的普通代码块，方法被调用时执行！");
    }
    public static void function2(){
        System.out.println("我是静态方法中的普通代码块，方法被调用时执行，晚于静态块执行！");
    }
}

普通块：定义在方法中的（无论普通方法或只静态方法），方法调用时执行

构造块：直接定义在类中，但没有static，有限构造方法执行，万余静态块执行

静态块：定义在类中，被static{}包裹，最先被执行，且对于一个类的多个对吸纳改只执行一次

同步块：synchronized关键字修饰，与线程相关。在多线程环境下，对共享数据的读写操作是需要互斥进行的，否则会导致数据的不一致性。
同步代码块需要写在方法中。

二.静态代码块和构造代码块的异同点

相同点：都是JVM加载类后且在构造函数执行之前执行，在类中可定义多个，一般在代码块中对一些static变量进行赋值。

不同点：静态代码块在非静态代码块之前执行。静态代码块只在第一次new时执行一次，之后不在执行。而非静态代码块每new一次就执行一次。

三.示例

普通代码块：在方法或语句中出现的{}就称为普通代码块。普通代码块和一般语句的执行顺序由他们在代码中出现的次序决定，先出现先执行。

public class Test { 
  public static void main(String[] args) { 
    { 
      int x = 3; 
      System.out.println("普通代码块内的变量x=" + x); 
    } 
    int x = 1; 
    System.out.println("主方法内的变量x=" + x); 
    { 
      int y = 7; 
      System.out.println("普通代码块内的变量y=" + y); 
    } 
  } 
} 
/* 
 * 运行结果  普通代码块内的变量x=3 
 *      主方法内的变量x=1 
 *      普通代码块内的变量y=7 
 */

构造代码块：直接在类中定义且没有加static关键字的代码块称为{}构造代码块。构造代码块在创建对象时被调用，每次创建对象都会被调用，
并且构造代码块的执行次序优先于类构造函数。如果存在多个构造代码块，执行顺序由他们在代码中出现的次序决定，先出现先执行。

	
public class Test1 {
    {
        System.out.println("第一构造块");
    }
    public Test1(int i) {
        System.out.println("第" + i + "次调用" + "构造方法");
    }
    {
        System.out.println("第二构造块");
    }
    public static void main(String[] args) {
        new Test1(0);
        new Test1(1);
        new Test1(2);
    }
}
/* 
 * 执行结果 第一构造块 
 *      第二构造块 
 *      第0次调用构造方法 
 *      第一构造块 
 *      第二构造块 
 *      第1次调用构造方法 
 *      第一构造块 
 *      第二构造块 
 *      第2次调用构造方法 
 */

静态代码块:在java中使用static关键字声明的代码块。静态块用于初始化类，为类的属性初始化。每个静态代码块只会执行一次。由于JVM在加载类时会执行静态代码块，
所以静态代码块先于主方法执行。

如果类中包含多个静态代码块，那么将按照"先定义的代码先执行，后定义的代码后执行"。

注意：

1.静态代码块不能存在于任何方法体内。

2.静态代码块不能直接访问实例变量和实例方法，需要通过类的实例对象来访问。
