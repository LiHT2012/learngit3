 数组是一种引用类型的变量，因此使用它定义一个变量时，仅仅表示定义了一个引用变量（也就是定义了一个指针），这个引用变量还未指向任何有效的内存，
 因此定义数组时不能指定数组的长度。而且由于定义数组仅仅只是定义了一个引用变量，并未指向任何有效的内存空间，所以还没有内存空间来存储数组元素，
 因此这个数组也不能使用，只有对数组进行初始化后，才可以使用。

定义数组时不能指定数组的长度。
4.5.3 数组的初始化

4.5.3 数组的初始化

Java语言中数组必须先初始化，然后才可以使用。所谓初始化，就是为数组的数组元素分配内存空间，并为每个数组元素赋初始值。

学生提问：能不能只分配内存空间，不赋初始值呢？

答：不行！一旦为数组的每个数组元素分配了内存空间，每个内存空间里存储的内容就是该数组元素的值，即使这个内存空间存储的内容是空，这个空也是一个值（null）
。不管以哪种方式来初始化数组，只要为数组元素分配了内存空间，数组元素就具有了初始值，初始值的获得有两种形式：一种由系统自动分配，一种由程序员指定。

数组的初始化有两种方式：

静态初始化：初始化时由程序员显式指定每个数组元素的初始值，由系统决定需要的数组长度。

动态初始化：初始化时程序员只指定数组长度，由系统为数组元素分配初始值。

静态初始化

静态初始化的语法格式如下：

arrayName = new type[]{element1, element2 , element3 , element4 ...}

在上面的语法格式中，前面的type就是数组元素的数据类型，此处的type必须与定义数组变量时所使用的type相同，也可以是定义数组时所使用的type的子类；
并使用花括号把所有的数组元素括起来，多个数组元素之间以英文逗号（,）隔开，定义初始化值的花括号紧跟[]之后。值得指出的是：执行静态初始化时，
显式指定的数组元素值的类型必须与new关键字后type类型相同，或者是其子类的实例。下面代码定义使用了这三种形式类进行静态初始化：

程序清单：codes/04/4-5/TestArray.java
//定义一个int数组类型的变量，变量名为intArr.
int[] intArr;
//使用静态初始化，初始化数组时只指定数组元素的初始值，不指定数组长度。
intArr = new int[]{5, 6, 8 , 20};
//定义一个Object数组类型的变量，变量名为objArr.
Object[] objArr ;
//使用静态初始化，初始化数组时数组元素的类型是定义数组时数组元素类型的子类
objArr = new String[] {"Java" , "李刚"};
Object[] objArr2 ;
//使用静态初始化 
objArr2 = new Object[] {"Java" , "李刚"};

因为Java语言是面向对象的编程语言，能很好地支持子类和父类的继承关系：子类实例是一种特殊的父类实例。在上面程序中，String类型是Object类型的子类，
即字符串是一种特殊的Object实例。关于继承更详细的介绍，请参考本书第5章。

除此之外，静态初始化还有如下简化的语法格式：

arrayName = {element1, element2 , element3 , element4 ...}

在这种语法格式中，直接使用花括号来定义一个数组，花括号把所有数组元素括起来形成一个数组。

实际开发过程中，可能更习惯将数组定义和数组初始化同时完成，如下代码（程序清单同上）：

//数组的定义和初始化同时完成，使用简化的静态初始化写法
int[] a = {5, 6 , 7, 9};

动态初始化

动态初始化只指定数组的长度，由系统为每个数组元素指定初始值，动态初始化的语法格式如下：

arrayName = new type[length];

在上面语法中，需要指定一个int整型的length参数，这个参数指定了数组的长度，也就是可以容纳数组元素的个数。与静态初始化相似的，此处的type必须与定义数组时
使用的type类型相同，或者是定义数组时使用的type类型的子类。下面代码示范了如何进行动态初始化（程序清单同上）：

//数组的定义和初始化同时完成，使用动态初始化语法
int[] prices = new int[5];
//数组的定义和初始化同时完成，初始化数组时元素的类型是定义数组时元素类型的子类
Object[] books = new String[4];

执行动态初始化时，程序员只需指定数组的长度，即为每个数组元素指定所需的内存空间，系统将负责为这些数组元素分配初始值。指定初始值时，系统按如下规则
分配初始值：

数组元素的类型是基本类型中的整数类型（byte、short、int和long），则数组元素的值是0。

数组元素的类型是基本类型中的浮点类型（float、double），则数组元素的值是0.0。

数组元素的类型是基本类型中的字符类型（char），则数组元素的值是'\u0000'。

数组元素的类型是基本类型中的布尔类型（boolean），则数组元素的值是false。

数组元素的类型是引用类型（类、接口和数组），则数组元素的值是null。

不要静态初始化和动态初始化同时使用，也就是说不要在进行数组初始化时，既指定数组的长度，也为每个数组元素分配初始值。

数组初始化完成后，就可以使用数组了，包括为数组元素赋值，访问数组元素值和获得数组长度等。

//SystemMessage为自己定义的类
public void createSystemMessage(SystemMessage message, String userId) {
		String messageId = systemMessageDao.insertMessage(message);
		SystemMessage[] arr = {message};
		arr = new SystemMessage[] {message};
		arr = new SystemMessage[2];

//数组作为传参时的形态，在调用时（key,hashKey1,hashKey2有多少写多少）    
List<String> getHashByMultiHashKey(String key, String ... hashKey);
